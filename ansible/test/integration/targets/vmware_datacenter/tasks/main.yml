# Test code for the vmware_datacenter module.
# (c) 2017, Abhijeet Kasurde <akasurde@redhat.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
- name: make sure pyvmomi is installed
  pip:
    name: pyvmomi
    state: latest

- name: store the vcenter container ip
  set_fact:
    vcsim: "{{ lookup('env', 'vcenter_host') }}"

- debug: var=vcsim

- name: Wait for vcsim controller to come online {{ vcsim }}
  wait_for:
    host: "{{ vcsim }}"
    port: 5000
    state: started

- name: kill vcsim
  uri:
    url: "{{ 'http://' + vcsim + ':5000/killall' }}"

- name: start vcsim
  uri:
    url: "{{ 'http://' + vcsim + ':5000/spawn?cluster=2' }}"
  register: vcsim_instance

- name: Wait for vcsim server to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 443
    state: started

- name: get a list of Datacenter from vcsim
  uri:
    url: "{{ 'http://' + vcsim + ':5000/govc_find?filter=DC' }}"
  register: datacenters

- debug: var=vcsim_instance
- debug: var=datacenters

# Testcase 0001: Add Datacenter
- name: add datacenter
  vmware_datacenter:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: datacenter_0001
    state: present
  register: dc_result

- name: get a list of Datacenter from vcsim after adding datacenter
  uri:
    url: "{{ 'http://' + vcsim + ':5000/govc_find?filter=DC' }}"
  register: new_datacenters

- name: ensure datacenter is present
  assert:
    that:
        - "{{ dc_result.changed == true }}"
        - "{{ '/datacenter_0001' in new_datacenters['json'] }}"

# Testcase 0002: Try to add same datacenter
- name: add datacenter again to check idempotent behavior
  vmware_datacenter:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: datacenter_0001
    state: present
  register: dc_result_two

- name: ensure datacenter status is not changed
  assert:
    that:
        - "{{ dc_result_two.changed == false }}"

# FIXME: Uncomment this testcase once vcsim supports datacenter delete method
# Currently, vcsim does not support datacenter delete option,
# Once this feature is available we can uncomment following testcase

# Testcase 0002: Delete Datacenter
#- name: add datacenter
#  vmware_datacenter:
#    validate_certs: False
#    hostname: "{{ vcsim }}"
#    username: "{{ vcsim_instance['json']['username'] }}"
#    password: "{{ vcsim_instance['json']['password'] }}"
#    datacenter_name: datacenter_0001
#    state: absent
#  register: dc_result_delete

#- name: get a list of Datacenter from vcsim after adding datacenter
#  uri:
#    url: "{{ 'http://' + vcsim + ':5000/govc_find?filter=DC' }}"
#  register: new_datacenters_delete

#- name: ensure datacenter is absent
#  assert:
#    that:
#        - "{{ dc_result_delete.changed == true }}"
#        - "{{ '/datacenter_0001' not in new_datacenters_delete['json'] }}
